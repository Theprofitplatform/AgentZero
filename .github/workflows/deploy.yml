name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-asyncio

    - name: Run tests
      run: |
        pytest tests/unit -v
        pytest tests/integration -v

  build:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: test

    permissions:
      contents: read
      packages: write

    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push API image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.api
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/api:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Dashboard image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.dashboard
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/dashboard:${{ github.sha }}
        build-args: |
          VITE_API_URL=https://agent.theprofitplatform.com.au/api/v1
          VITE_WS_URL=wss://agent.theprofitplatform.com.au/ws

    - name: Build and push Agent image
      uses: docker/build-push-action@v4
      with:
        context: .
        file: ./docker/Dockerfile.agent
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/agent:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/agent:${{ github.sha }}

  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    needs: build
    environment: production

    steps:
    - uses: actions/checkout@v3

    - name: Copy files to server
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        source: |
          docker-compose.yml
          docker-compose.prod.yml
          docker/
          scripts/
          .env.production
        target: /var/www/agentzero

    - name: Deploy to server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          cd /var/www/agentzero

          # Copy production environment file
          cp .env.production .env

          # Pull latest images
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml pull

          # Stop existing containers
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml down

          # Start new containers
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d

          # Run database migrations
          docker-compose -f docker-compose.yml -f docker-compose.prod.yml exec -T api python -m alembic upgrade head

          # Health check
          sleep 10
          curl -f https://agent.theprofitplatform.com.au/health || exit 1

    - name: Notify deployment status
      if: always()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: |
          Deployment to agent.theprofitplatform.com.au: ${{ job.status }}
          Commit: ${{ github.sha }}
          Author: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  cleanup:
    name: Cleanup old images
    runs-on: ubuntu-latest
    needs: deploy

    steps:
    - name: Cleanup old images on server
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.DEPLOY_HOST }}
        username: ${{ secrets.DEPLOY_USER }}
        key: ${{ secrets.DEPLOY_KEY }}
        script: |
          # Remove unused Docker images
          docker image prune -f

          # Remove images older than 7 days
          docker images --format "{{.ID}} {{.CreatedSince}}" | grep "days\|weeks\|months" | awk '{print $1}' | xargs -r docker rmi || true